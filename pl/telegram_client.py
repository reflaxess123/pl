"""
Telegram userbot –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å ProxyAPI GPT-4o mini
"""

import os
import re
import asyncio
from typing import Optional
from telethon import TelegramClient, events
from telethon.tl.types import Message
from dotenv import load_dotenv

from .proxy_api import ProxyAPIClient

load_dotenv()


class TelegramUserBot:
    """Telegram userbot –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ @pl"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è userbot"""
        # Telegram API credentials
        self.api_id = os.getenv('TELEGRAM_API_ID')
        self.api_hash = os.getenv('TELEGRAM_API_HASH')
        self.phone = os.getenv('TELEGRAM_PHONE')
        
        if not all([self.api_id, self.api_hash]):
            raise ValueError(
                "–ù–µ –Ω–∞–π–¥–µ–Ω—ã TELEGRAM_API_ID –∏ TELEGRAM_API_HASH –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. "
                "–ü–æ–ª—É—á–∏—Ç–µ –∏—Ö –Ω–∞ https://my.telegram.org"
            )
        
        # –°–æ–∑–¥–∞–µ–º Telegram –∫–ª–∏–µ–Ω—Ç
        self.client = TelegramClient('session', int(self.api_id), self.api_hash)
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è Telegram
        telegram_system_prompt = (
            "–¢—ã - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram. "
            "–¢—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–º–æ–≥–∞–µ—à—å –µ–º—É —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏. "
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∞ —Ç—ã –∏—Ö –≤—ã–ø–æ–ª–Ω—è–µ—à—å. "
            "–¢–≤–æ—è —Ü–µ–ª—å - –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—ã —Ç–æ—á–Ω–æ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ, –ø–∏—Å–∞—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "
            "–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É, –∏–∑–±–µ–≥–∞–π –ª–∏—à–Ω–∏—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –∏ —Ñ—Ä–∞–∑ –≤—Ä–æ–¥–µ '–∫–∞–∫ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç'. "
            "–ü–∏—à–∏ —Ç–∞–∫, –∫–∞–∫ –ø–∏—Å–∞–ª –±—ã —Å–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å."
        )
        
        # ProxyAPI –∫–ª–∏–µ–Ω—Ç
        self.proxy_client = ProxyAPIClient(system_prompt=telegram_system_prompt)
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –∫–æ–º–∞–Ω–¥
        self.command_pattern = re.compile(r'^@gpt-(.+)', re.IGNORECASE | re.DOTALL)
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ userbot"""
        print("üöÄ –ó–∞–ø—É—Å–∫ Telegram UserBot...")
        
        await self.client.start(phone=self.phone)
        
        me = await self.client.get_me()
        print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.first_name} (@{me.username})")
        print("üì± UserBot –∞–∫—Ç–∏–≤–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @gpt-[–≤–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞] –≤ –ª—é–±–æ–º —á–∞—Ç–µ")
        print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        @self.client.on(events.NewMessage(outgoing=True))
        async def handle_message(event):
            await self._process_message(event)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        await self.client.run_until_disconnected()
    
    async def _process_message(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            message_text = event.message.message
            if not message_text:
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π @gpt
            match = self.command_pattern.match(message_text.strip())
            if not match:
                return
            
            command = match.group(1).strip()
            if not command:
                return
            
            print(f"\nüìù –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {command}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
            async with self.client.action(event.chat_id, 'typing'):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ GPT
                try:
                    response = self.proxy_client.generate_text(
                        command,
                        temperature=0.7,
                        max_tokens=500,
                        top_p=0.9
                    )
                    
                    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º
                    await event.edit(response)
                    print(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {response[:100]}...")
                    
                except Exception as e:
                    error_msg = f"‚ùå –û—à–∏–±–∫–∞ GPT: {str(e)}"
                    await event.edit(error_msg)
                    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ userbot"""
        if self.client.is_connected():
            await self.client.disconnect()
            print("üõë UserBot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


class TelegramUserBotAdvanced(TelegramUserBot):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è userbot —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏"""
    
    def __init__(self):
        super().__init__()
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∫–æ–º–∞–Ω–¥
        self.patterns = {
            # –ö–æ–º–∞–Ω–¥—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º: @gpt-context50-open-rewrite —Ç–µ–∫—Å—Ç
            'context_open': re.compile(r'^@gpt-context(\d+)-open-(.+)', re.IGNORECASE | re.DOTALL),
            # –ö–æ–º–∞–Ω–¥—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º: @gpt-context50-rewrite —Ç–µ–∫—Å—Ç  
            'context': re.compile(r'^@gpt-context(\d+)-(.+)', re.IGNORECASE | re.DOTALL),
            # –û–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Å open: @gpt-open-rewrite —Ç–µ–∫—Å—Ç
            'open': re.compile(r'^@gpt-open-(.+)', re.IGNORECASE | re.DOTALL),
            # –û–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            'rewrite': re.compile(r'^@gpt-rewrite\s+(.+)', re.IGNORECASE | re.DOTALL),
            'translate': re.compile(r'^@gpt-translate\s+(.+)', re.IGNORECASE | re.DOTALL),
            'explain': re.compile(r'^@gpt-explain\s+(.+)', re.IGNORECASE | re.DOTALL),
            'fix': re.compile(r'^@gpt-fix\s+(.+)', re.IGNORECASE | re.DOTALL),
            'short': re.compile(r'^@gpt-short\s+(.+)', re.IGNORECASE | re.DOTALL),
            'general': re.compile(r'^@gpt-(.+)', re.IGNORECASE | re.DOTALL),
        }
    
    async def _process_message(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏"""
        try:
            message_text = event.message.message
            if not message_text:
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            for command_type, pattern in self.patterns.items():
                match = pattern.match(message_text.strip())
                if match:
                    print(f"üîç –ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–∏–ø–∞: {command_type}")
                    
                    if command_type == 'context_open':
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏ —Ñ–ª–∞–≥–æ–º open
                        context_count = int(match.group(1))
                        command_text = match.group(2).strip()
                        await self._handle_context_command(event, context_count, command_text, open_mode=True)
                    elif command_type == 'context':
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
                        context_count = int(match.group(1))
                        command_text = match.group(2).strip()
                        await self._handle_context_command(event, context_count, command_text, open_mode=False)
                    elif command_type == 'open':
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É —Å —Ñ–ª–∞–≥–æ–º open
                        command_text = match.group(1).strip()
                        await self._handle_open_command(event, command_text)
                    else:
                        # –û–±—ã—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                        await self._handle_command(event, command_type, match.group(1).strip())
                    return
            
            print(f"‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞: {message_text[:50]}...")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def _get_context_messages(self, event, limit: int = 5) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if limit <= 0:
            return ""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            messages = []
            async for message in self.client.iter_messages(
                event.chat_id, 
                limit=limit + 1,  # +1 —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                reverse=True
            ):
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if message.id == event.message.id:
                    continue
                    
                # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                if message.message:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                    if message.out:
                        sender = "–í—ã"
                    else:
                        sender_user = await message.get_sender()
                        if sender_user:
                            sender = getattr(sender_user, 'first_name', '–°–æ–±–µ—Å–µ–¥–Ω–∏–∫') or '–°–æ–±–µ—Å–µ–¥–Ω–∏–∫'
                        else:
                            sender = '–°–æ–±–µ—Å–µ–¥–Ω–∏–∫'
                    
                    messages.append(f"{sender}: {message.message}")
            
            if messages:
                context = "–ö–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã:\n" + "\n".join(reversed(messages[-limit:])) + "\n\n"
                print(f"üìö –î–æ–±–∞–≤–ª–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
                return context
            
            return ""
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            return ""
    
    async def _handle_context_command(self, event, context_count: int, command_text: str, open_mode: bool = False):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
        mode_text = "open " if open_mode else ""
        print(f"\nüìù –ö–æ–º–∞–Ω–¥–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º [{context_count}] {mode_text}: {command_text[:50]}...")
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑—É–º–Ω—ã–º–∏ –ø—Ä–µ–¥–µ–ª–∞–º–∏
        context_limit = max(0, min(context_count, 50))
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context = await self._get_context_messages(event, context_limit)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
        command_type = 'general'
        content = command_text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
        if command_text.startswith('rewrite '):
            command_type = 'rewrite'
            content = command_text[8:].strip()
        elif command_text.startswith('translate '):
            command_type = 'translate'
            content = command_text[10:].strip()
        elif command_text.startswith('explain '):
            command_type = 'explain'
            content = command_text[8:].strip()
        elif command_text.startswith('fix '):
            command_type = 'fix'
            content = command_text[4:].strip()
        elif command_text.startswith('short '):
            command_type = 'short'
            content = command_text[6:].strip()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
        prompts = {
            'rewrite': f"–ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –æ–Ω –∑–≤—É—á–∞–ª –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –≥—Ä–∞–º–æ—Ç–Ω–æ:\n\n{content}",
            'translate': f"–ü–µ—Ä–µ–≤–µ–¥–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫:\n\n{content}",
            'explain': f"–û–±—ä—è—Å–Ω–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏:\n\n{content}",
            'fix': f"–ò—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫–∏ –≤ —ç—Ç–æ–º —Ç–µ–∫—Å—Ç–µ:\n\n{content}",
            'short': f"–°–æ–∫—Ä–∞—Ç–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç, —Å–æ—Ö—Ä–∞–Ω–∏–≤ –æ—Å–Ω–æ–≤–Ω—É—é –º—ã—Å–ª—å:\n\n{content}",
            'general': content
        }
        
        base_prompt = prompts.get(command_type, content)
        final_prompt = context + base_prompt if context else base_prompt
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
        async with self.client.action(event.chat_id, 'typing'):
            try:
                response = self.proxy_client.generate_text(
                    final_prompt,
                    temperature=0.7,
                    max_tokens=1200,  # –ë–æ–ª—å—à–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                    top_p=0.9
                )
                
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏–ª–∏ –¥–æ–ø–æ–ª–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
                if open_mode:
                    # –†–µ–∂–∏–º open: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç + –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                    original_text = event.message.message
                    full_response = f"{original_text}\n\n–û—Ç–≤–µ—Ç GPT:\n{response}"
                    await event.edit(full_response)
                    print(f"‚úÖ –û—Ç–≤–µ—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º (open —Ä–µ–∂–∏–º) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {response[:100]}...")
                else:
                    # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º: –∑–∞–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º
                    await event.edit(response)
                    print(f"‚úÖ –û—Ç–≤–µ—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {response[:100]}...")
                
            except Exception as e:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
                await event.edit(error_msg)
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def _handle_open_command(self, event, command_text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å —Ñ–ª–∞–≥–æ–º open (–±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)"""
        print(f"\nüìù Open –∫–æ–º–∞–Ω–¥–∞: {command_text[:50]}...")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
        command_type = 'general'
        content = command_text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
        if command_text.startswith('rewrite '):
            command_type = 'rewrite'
            content = command_text[8:].strip()
        elif command_text.startswith('translate '):
            command_type = 'translate'
            content = command_text[10:].strip()
        elif command_text.startswith('explain '):
            command_type = 'explain'
            content = command_text[8:].strip()
        elif command_text.startswith('fix '):
            command_type = 'fix'
            content = command_text[4:].strip()
        elif command_text.startswith('short '):
            command_type = 'short'
            content = command_text[6:].strip()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
        prompts = {
            'rewrite': f"–ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –æ–Ω –∑–≤—É—á–∞–ª –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –≥—Ä–∞–º–æ—Ç–Ω–æ:\n\n{content}",
            'translate': f"–ü–µ—Ä–µ–≤–µ–¥–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫:\n\n{content}",
            'explain': f"–û–±—ä—è—Å–Ω–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏:\n\n{content}",
            'fix': f"–ò—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫–∏ –≤ —ç—Ç–æ–º —Ç–µ–∫—Å—Ç–µ:\n\n{content}",
            'short': f"–°–æ–∫—Ä–∞—Ç–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç, —Å–æ—Ö—Ä–∞–Ω–∏–≤ –æ—Å–Ω–æ–≤–Ω—É—é –º—ã—Å–ª—å:\n\n{content}",
            'general': content
        }
        
        final_prompt = prompts.get(command_type, content)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
        async with self.client.action(event.chat_id, 'typing'):
            try:
                response = self.proxy_client.generate_text(
                    final_prompt,
                    temperature=0.7,
                    max_tokens=1000,
                    top_p=0.9
                )
                
                # –†–µ–∂–∏–º open: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç + –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                original_text = event.message.message
                full_response = f"{original_text}\n\n–û—Ç–≤–µ—Ç GPT:\n{response}"
                await event.edit(full_response)
                print(f"‚úÖ –û—Ç–≤–µ—Ç (open —Ä–µ–∂–∏–º) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {response[:100]}...")
                
            except Exception as e:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
                await event.edit(error_msg)
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def _handle_command(self, event, command_type: str, content: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã"""
        if not content:
            return
        
        print(f"\nüìù –ö–æ–º–∞–Ω–¥–∞ [{command_type}]: {content[:50]}...")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–º–∞–Ω–¥—ã
        prompts = {
            'rewrite': f"–ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –æ–Ω –∑–≤—É—á–∞–ª –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –≥—Ä–∞–º–æ—Ç–Ω–æ:\n\n{content}",
            'translate': f"–ü–µ—Ä–µ–≤–µ–¥–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫:\n\n{content}",
            'explain': f"–û–±—ä—è—Å–Ω–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏:\n\n{content}",
            'fix': f"–ò—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫–∏ –≤ —ç—Ç–æ–º —Ç–µ–∫—Å—Ç–µ:\n\n{content}",
            'short': f"–°–æ–∫—Ä–∞—Ç–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç, —Å–æ—Ö—Ä–∞–Ω–∏–≤ –æ—Å–Ω–æ–≤–Ω—É—é –º—ã—Å–ª—å:\n\n{content}",
            'general': content
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç (–±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥)
        final_prompt = prompts.get(command_type, content)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
        async with self.client.action(event.chat_id, 'typing'):
            try:
                response = self.proxy_client.generate_text(
                    final_prompt,
                    temperature=0.7,
                    max_tokens=1000,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                    top_p=0.9
                )
                
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º
                await event.edit(response)
                print(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {response[:100]}...")
                
            except Exception as e:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
                await event.edit(error_msg)
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ userbot"""
    try:
        # –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –æ–±—ã—á–Ω—É—é –∏–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
        # bot = TelegramUserBot()  # –ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è
        bot = TelegramUserBotAdvanced()  # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
        
        await bot.start()
        
    except KeyboardInterrupt:
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        if 'bot' in locals():
            await bot.stop()
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    asyncio.run(main()) 