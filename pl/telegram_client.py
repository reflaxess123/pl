"""
Telegram userbot –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å ProxyAPI GPT-4o mini
"""

import os
import re
import asyncio
from typing import Optional
from telethon import TelegramClient, events
from telethon.tl.types import Message
from dotenv import load_dotenv

from .proxy_api import ProxyAPIClient

load_dotenv()


class TelegramUserBot:
    """Telegram userbot –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ @pl"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è userbot"""
        # Telegram API credentials
        self.api_id = os.getenv('TELEGRAM_API_ID')
        self.api_hash = os.getenv('TELEGRAM_API_HASH')
        self.phone = os.getenv('TELEGRAM_PHONE')
        
        if not all([self.api_id, self.api_hash]):
            raise ValueError(
                "–ù–µ –Ω–∞–π–¥–µ–Ω—ã TELEGRAM_API_ID –∏ TELEGRAM_API_HASH –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. "
                "–ü–æ–ª—É—á–∏—Ç–µ –∏—Ö –Ω–∞ https://my.telegram.org"
            )
        
        # –°–æ–∑–¥–∞–µ–º Telegram –∫–ª–∏–µ–Ω—Ç
        self.client = TelegramClient('session', int(self.api_id), self.api_hash)
        
        # ProxyAPI –∫–ª–∏–µ–Ω—Ç
        self.proxy_client = ProxyAPIClient()
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –∫–æ–º–∞–Ω–¥
        self.command_pattern = re.compile(r'^@pl-(.+)', re.IGNORECASE | re.DOTALL)
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ userbot"""
        print("üöÄ –ó–∞–ø—É—Å–∫ Telegram UserBot...")
        
        await self.client.start(phone=self.phone)
        
        me = await self.client.get_me()
        print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.first_name} (@{me.username})")
        print("üì± UserBot –∞–∫—Ç–∏–≤–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @pl-[–≤–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞] –≤ –ª—é–±–æ–º —á–∞—Ç–µ")
        print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        @self.client.on(events.NewMessage(outgoing=True))
        async def handle_message(event):
            await self._process_message(event)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        await self.client.run_until_disconnected()
    
    async def _process_message(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            message_text = event.message.message
            if not message_text:
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π @pl
            match = self.command_pattern.match(message_text.strip())
            if not match:
                return
            
            command = match.group(1).strip()
            if not command:
                return
            
            print(f"\nüìù –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {command}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
            async with self.client.action(event.chat_id, 'typing'):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ GPT
                try:
                    response = self.proxy_client.generate_text(
                        command,
                        temperature=0.7,
                        max_tokens=500,
                        top_p=0.9
                    )
                    
                    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º
                    await event.edit(response)
                    print(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {response[:100]}...")
                    
                except Exception as e:
                    error_msg = f"‚ùå –û—à–∏–±–∫–∞ GPT: {str(e)}"
                    await event.edit(error_msg)
                    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ userbot"""
        if self.client.is_connected():
            await self.client.disconnect()
            print("üõë UserBot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


class TelegramUserBotAdvanced(TelegramUserBot):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è userbot —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏"""
    
    def __init__(self):
        super().__init__()
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∫–æ–º–∞–Ω–¥
        self.patterns = {
            'rewrite': re.compile(r'^@pl-rewrite\s+(.+)', re.IGNORECASE | re.DOTALL),
            'translate': re.compile(r'^@pl-translate\s+(.+)', re.IGNORECASE | re.DOTALL),
            'explain': re.compile(r'^@pl-explain\s+(.+)', re.IGNORECASE | re.DOTALL),
            'fix': re.compile(r'^@pl-fix\s+(.+)', re.IGNORECASE | re.DOTALL),
            'short': re.compile(r'^@pl-short\s+(.+)', re.IGNORECASE | re.DOTALL),
            'general': re.compile(r'^@pl-(.+)', re.IGNORECASE | re.DOTALL),
        }
    
    async def _process_message(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏"""
        try:
            message_text = event.message.message
            if not message_text:
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            for command_type, pattern in self.patterns.items():
                match = pattern.match(message_text.strip())
                if match:
                    print(f"üîç –ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–∏–ø–∞: {command_type}")
                    await self._handle_command(event, command_type, match.group(1).strip())
                    return
            
            print(f"‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞: {message_text[:50]}...")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def _handle_command(self, event, command_type: str, content: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã"""
        if not content:
            return
        
        print(f"\nüìù –ö–æ–º–∞–Ω–¥–∞ [{command_type}]: {content[:50]}...")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–º–∞–Ω–¥—ã
        prompts = {
            'rewrite': f"–ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –æ–Ω –∑–≤—É—á–∞–ª –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –≥—Ä–∞–º–æ—Ç–Ω–æ:\n\n{content}",
            'translate': f"–ü–µ—Ä–µ–≤–µ–¥–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫:\n\n{content}",
            'explain': f"–û–±—ä—è—Å–Ω–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏:\n\n{content}",
            'fix': f"–ò—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫–∏ –≤ —ç—Ç–æ–º —Ç–µ–∫—Å—Ç–µ:\n\n{content}",
            'short': f"–°–æ–∫—Ä–∞—Ç–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç, —Å–æ—Ö—Ä–∞–Ω–∏–≤ –æ—Å–Ω–æ–≤–Ω—É—é –º—ã—Å–ª—å:\n\n{content}",
            'general': content
        }
        
        prompt = prompts.get(command_type, content)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
        async with self.client.action(event.chat_id, 'typing'):
            try:
                response = self.proxy_client.generate_text(
                    prompt,
                    temperature=0.7,
                    max_tokens=800,
                    top_p=0.9
                )
                
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º
                await event.edit(response)
                print(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {response[:100]}...")
                
            except Exception as e:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
                await event.edit(error_msg)
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ userbot"""
    try:
        # –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –æ–±—ã—á–Ω—É—é –∏–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
        # bot = TelegramUserBot()  # –ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è
        bot = TelegramUserBotAdvanced()  # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
        
        await bot.start()
        
    except KeyboardInterrupt:
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        if 'bot' in locals():
            await bot.stop()
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    asyncio.run(main()) 