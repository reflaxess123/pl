"""
Telegram userbot –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å ProxyAPI GPT-4o mini
"""

import os
import re
import asyncio
import json
from typing import Optional, Dict, Set, List
from telethon import TelegramClient, events
from telethon.tl.types import Message
from dotenv import load_dotenv

from .proxy_api import ProxyAPIClient

load_dotenv()


class TelegramUserBot:
    """Telegram userbot –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ @pl"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è userbot"""
        # Telegram API credentials
        self.api_id = os.getenv('TELEGRAM_API_ID')
        self.api_hash = os.getenv('TELEGRAM_API_HASH')
        self.phone = os.getenv('TELEGRAM_PHONE')
        
        if not all([self.api_id, self.api_hash]):
            raise ValueError(
                "–ù–µ –Ω–∞–π–¥–µ–Ω—ã TELEGRAM_API_ID –∏ TELEGRAM_API_HASH –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. "
                "–ü–æ–ª—É—á–∏—Ç–µ –∏—Ö –Ω–∞ https://my.telegram.org"
            )
        
        # –°–æ–∑–¥–∞–µ–º Telegram –∫–ª–∏–µ–Ω—Ç
        self.client = TelegramClient('session', int(self.api_id), self.api_hash)
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
        self.normal_system_prompt = (
            "–†–ï–ñ–ò–ú: –¢–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨! –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞ ('—è', '–º–Ω–µ', '–º–æ–π')! "
            "–¢—ã –ù–ï –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –ù–ï –ø–æ–º–æ—â–Ω–∏–∫, –∞ —Å–∞–º —á–µ–ª–æ–≤–µ–∫ –∫–æ—Ç–æ—Ä—ã–π –ø–∏—à–µ—Ç –≤ —á–∞—Ç–µ. "
            "–í–ê–ñ–ù–û: –ï—Å–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ –µ—Å—Ç—å '–ö–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã:', –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏ –∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. "
            "–≠—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞. –û—Ç–≤–µ—á–∞–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —á–µ–ª–æ–≤–µ–∫. "
            "–ò—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—É—é —Ä–µ—á—å, –±—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –Ω–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º. "
            "–ú–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–Ω–≥ –∏ —ç–º–æ—Ü–∏–∏, –Ω–æ –±–µ–∑ –º–∞—Ç–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–Ω–∞—á–µ). "
            "–ó–ê–ü–†–ï–©–ï–ù–û –≥–æ–≤–æ—Ä–∏—Ç—å –æ—Ç —Ç—Ä–µ—Ç—å–µ–≥–æ –ª–∏—Ü–∞ –∏–ª–∏ –∫–∞–∫ —Å–æ–≤–µ—Ç—á–∏–∫!"
        )
        
        self.hide_system_prompt = (
            "–†–ï–ñ–ò–ú: –¢–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨! –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞ ('—è', '–º–Ω–µ', '–º–æ–π')! "
            "–¢—ã –ù–ï –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –ù–ï –ø–æ–º–æ—â–Ω–∏–∫, –∞ —Å–∞–º —á–µ–ª–æ–≤–µ–∫ –∫–æ—Ç–æ—Ä—ã–π –ø–∏—à–µ—Ç –≤ —á–∞—Ç–µ. "
            "–ï—Å–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ –µ—Å—Ç—å '–ö–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã:', –∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. "
            "–û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π –º–∞—Ç, —Å–ª–µ–Ω–≥, –≥—Ä—É–±—É—é —Ä–µ—á—å. "
            "–í–µ–¥–∏ —Å–µ–±—è –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π —á–µ–ª–æ–≤–µ–∫ —Å–æ –≤—Å–µ–º–∏ —ç–º–æ—Ü–∏—è–º–∏ - –∑–ª–æ—Å—Ç—å, —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ, —Å–∞—Ä–∫–∞–∑–º. "
            "–ú–æ–∂–µ—à—å –±—ã—Ç—å –¥–µ—Ä–∑–∫–∏–º, –ø—Ä—è–º—ã–º, –±–µ–∑ —Ü–µ—Ä–µ–º–æ–Ω–∏–π. "
            "–ó–ê–ü–†–ï–©–ï–ù–û –≥–æ–≤–æ—Ä–∏—Ç—å –æ—Ç —Ç—Ä–µ—Ç—å–µ–≥–æ –ª–∏—Ü–∞ –∏–ª–∏ –∫–∞–∫ —Å–æ–≤–µ—Ç—á–∏–∫!"
        )
        
        # ProxyAPI –∫–ª–∏–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
        self.normal_client = ProxyAPIClient(system_prompt=self.normal_system_prompt)
        self.hide_client = ProxyAPIClient(system_prompt=self.hide_system_prompt)
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –∫–æ–º–∞–Ω–¥
        self.command_pattern = re.compile(r'^@gpt\s+(.+)', re.IGNORECASE | re.DOTALL)
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ userbot"""
        print("üöÄ –ó–∞–ø—É—Å–∫ Telegram UserBot...")
        
        await self.client.start(phone=self.phone)
        
        me = await self.client.get_me()
        print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.first_name} (@{me.username})")
        print("üì± UserBot –∞–∫—Ç–∏–≤–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @gpt [–≤–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞] –≤ –ª—é–±–æ–º —á–∞—Ç–µ")
        print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        @self.client.on(events.NewMessage(outgoing=True))
        async def handle_message(event):
            await self._process_message(event)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        await self.client.run_until_disconnected()
    
    async def _process_message(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            message_text = event.message.message
            if not message_text:
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π @gpt
            match = self.command_pattern.match(message_text.strip())
            if not match:
                return
            
            command = match.group(1).strip()
            if not command:
                return
            
            print(f"\nüìù –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {command}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
            async with self.client.action(event.chat_id, 'typing'):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ GPT
                try:
                    response = self.proxy_client.generate_text(
                        command,
                        temperature=0.7,
                        max_tokens=500,
                        top_p=0.9
                    )
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å + –æ—Ç–≤–µ—Ç
                    original_text = event.message.message
                    full_response = f"{original_text}\n\n–û—Ç–≤–µ—Ç GPT:\n{response}"
                    await event.edit(full_response)
                    print(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {response[:100]}...")
                    
                except Exception as e:
                    error_msg = f"‚ùå –û—à–∏–±–∫–∞ GPT: {str(e)}"
                    await event.edit(error_msg)
                    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ userbot"""
        if self.client.is_connected():
            await self.client.disconnect()
            print("üõë UserBot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


class TelegramUserBotAdvanced(TelegramUserBot):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è userbot —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏"""
    
    def __init__(self):
        super().__init__()
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∫–æ–º–∞–Ω–¥  
        self.patterns = {
            # –ö–æ–º–∞–Ω–¥—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏ hide: @gpt-context50-hide –∫–æ–º–∞–Ω–¥–∞
            'context_hide': re.compile(r'^@gpt-context(\d+)-hide\s+(.+)', re.IGNORECASE | re.DOTALL),
            # –ö–æ–º–∞–Ω–¥—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º: @gpt-context50 –∫–æ–º–∞–Ω–¥–∞
            'context': re.compile(r'^@gpt-context(\d+)\s+(.+)', re.IGNORECASE | re.DOTALL),
            # –û–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Å hide: @gpt-hide –∫–æ–º–∞–Ω–¥–∞
            'hide': re.compile(r'^@gpt-hide\s+(.+)', re.IGNORECASE | re.DOTALL),
            # –û–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: @gpt –∫–æ–º–∞–Ω–¥–∞
            'general': re.compile(r'^@gpt\s+(.+)', re.IGNORECASE | re.DOTALL),
        }
    
    async def _process_message(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏"""
        try:
            message_text = event.message.message
            if not message_text:
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            for command_type, pattern in self.patterns.items():
                match = pattern.match(message_text.strip())
                if match:
                    print(f"üîç –ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–∏–ø–∞: {command_type}")
                    
                    if command_type == 'context_hide':
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏ —Ñ–ª–∞–≥–æ–º hide
                        context_count = int(match.group(1))
                        command_text = match.group(2).strip()
                        await self._handle_context_command(event, context_count, command_text, hide_mode=True)
                    elif command_type == 'context':
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º (–æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º)
                        context_count = int(match.group(1))
                        command_text = match.group(2).strip()
                        await self._handle_context_command(event, context_count, command_text, hide_mode=False)
                    elif command_type == 'hide':
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É —Å —Ñ–ª–∞–≥–æ–º hide
                        command_text = match.group(1).strip()
                        await self._handle_hide_command(event, command_text)
                    else:
                        # –û–±—ã—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å + –æ—Ç–≤–µ—Ç)
                        await self._handle_command(event, command_type, match.group(1).strip())
                    return
            
            print(f"‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞: {message_text[:50]}...")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def _get_context_messages(self, event, limit: int = 5) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if limit <= 0:
            return ""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã —É—á–µ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
            fetch_limit = limit * 3  # –ë–µ—Ä–µ–º –≤ 3 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            messages = []
            
            async for message in self.client.iter_messages(
                event.chat_id, 
                limit=fetch_limit,
                reverse=False  # –ü–æ–ª—É—á–∞–µ–º –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
            ):
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if message.id == event.message.id:
                    continue
                    
                # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                if message.message and message.message.strip():
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                    if message.out:
                        sender = "–í—ã"
                    else:
                        sender_user = await message.get_sender()
                        if sender_user:
                            sender = getattr(sender_user, 'first_name', '–°–æ–±–µ—Å–µ–¥–Ω–∏–∫') or '–°–æ–±–µ—Å–µ–¥–Ω–∏–∫'
                        else:
                            sender = '–°–æ–±–µ—Å–µ–¥–Ω–∏–∫'
                    
                    messages.append(f"{sender}: {message.message}")
                    
                    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è, –∫–æ–≥–¥–∞ –Ω–∞–±—Ä–∞–ª–∏ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    if len(messages) >= limit:
                        break
            
            if messages:
                # –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å—Ç–∞—Ä—ã–µ —Å–Ω–∞—á–∞–ª–∞)
                context_messages = "\n".join(reversed(messages))
                context = f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π):\n{context_messages}\n\n–û—Ç–≤–µ—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:\n"
                
                if len(messages) < limit:
                    print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {limit} –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã—Ö (–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {fetch_limit})")
                else:
                    print(f"üìö –î–æ–±–∞–≤–ª–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π (–∑–∞–ø—Ä–æ—à–µ–Ω–æ: {limit}, –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {fetch_limit})")
                return context
            
            return ""
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            return ""
    
    async def _handle_context_command(self, event, context_count: int, command_text: str, hide_mode: bool = False):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
        mode_text = "hide " if hide_mode else ""
        print(f"\nüìù –ö–æ–º–∞–Ω–¥–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º [{context_count}] {mode_text}: {command_text[:50]}...")
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑—É–º–Ω—ã–º–∏ –ø—Ä–µ–¥–µ–ª–∞–º–∏
        context_limit = max(0, min(context_count, 50))
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context = await self._get_context_messages(event, context_limit)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
        command_type = 'general'
        content = command_text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
        if command_text.startswith('rewrite '):
            command_type = 'rewrite'
            content = command_text[8:].strip()
        elif command_text.startswith('translate '):
            command_type = 'translate'
            content = command_text[10:].strip()
        elif command_text.startswith('explain '):
            command_type = 'explain'
            content = command_text[8:].strip()
        elif command_text.startswith('fix '):
            command_type = 'fix'
            content = command_text[4:].strip()
        elif command_text.startswith('short '):
            command_type = 'short'
            content = command_text[6:].strip()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
        prompts = {
            'rewrite': f"–ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –æ–Ω –∑–≤—É—á–∞–ª –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –≥—Ä–∞–º–æ—Ç–Ω–æ:\n\n{content}",
            'translate': f"–ü–µ—Ä–µ–≤–µ–¥–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫:\n\n{content}",
            'explain': f"–û–±—ä—è—Å–Ω–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏:\n\n{content}",
            'fix': f"–ò—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫–∏ –≤ —ç—Ç–æ–º —Ç–µ–∫—Å—Ç–µ:\n\n{content}",
            'short': f"–°–æ–∫—Ä–∞—Ç–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç, —Å–æ—Ö—Ä–∞–Ω–∏–≤ –æ—Å–Ω–æ–≤–Ω—É—é –º—ã—Å–ª—å:\n\n{content}",
            'general': content
        }
        
        base_prompt = prompts.get(command_type, content)
        final_prompt = context + base_prompt if context else base_prompt
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
        async with self.client.action(event.chat_id, 'typing'):
            try:
                # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
                client = self.hide_client if hide_mode else self.normal_client
                
                response = client.generate_text(
                    final_prompt,
                    temperature=0.7,
                    max_tokens=1200,  # –ë–æ–ª—å—à–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                    top_p=0.9
                )
                
                # –í —Ä–µ–∂–∏–º–µ hide –∑–∞–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–æ–º
                if hide_mode:
                    await event.edit(response)
                    print(f"‚úÖ –û—Ç–≤–µ—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º (hide —Ä–µ–∂–∏–º) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {response[:100]}...")
                else:
                    # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç + –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç  
                    original_text = event.message.message
                    full_response = f"{original_text}\n\n–û—Ç–≤–µ—Ç GPT:\n{response}"
                    await event.edit(full_response)
                    print(f"‚úÖ –û—Ç–≤–µ—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {response[:100]}...")
                
            except Exception as e:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
                await event.edit(error_msg)
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def _handle_hide_command(self, event, command_text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å —Ñ–ª–∞–≥–æ–º hide (–±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)"""
        print(f"\nüìù Hide –∫–æ–º–∞–Ω–¥–∞: {command_text[:50]}...")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
        command_type = 'general'
        content = command_text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
        if command_text.startswith('rewrite '):
            command_type = 'rewrite'
            content = command_text[8:].strip()
        elif command_text.startswith('translate '):
            command_type = 'translate'
            content = command_text[10:].strip()
        elif command_text.startswith('explain '):
            command_type = 'explain'
            content = command_text[8:].strip()
        elif command_text.startswith('fix '):
            command_type = 'fix'
            content = command_text[4:].strip()
        elif command_text.startswith('short '):
            command_type = 'short'
            content = command_text[6:].strip()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
        prompts = {
            'rewrite': f"–ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –æ–Ω –∑–≤—É—á–∞–ª –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –≥—Ä–∞–º–æ—Ç–Ω–æ:\n\n{content}",
            'translate': f"–ü–µ—Ä–µ–≤–µ–¥–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫:\n\n{content}",
            'explain': f"–û–±—ä—è—Å–Ω–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏:\n\n{content}",
            'fix': f"–ò—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫–∏ –≤ —ç—Ç–æ–º —Ç–µ–∫—Å—Ç–µ:\n\n{content}",
            'short': f"–°–æ–∫—Ä–∞—Ç–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç, —Å–æ—Ö—Ä–∞–Ω–∏–≤ –æ—Å–Ω–æ–≤–Ω—É—é –º—ã—Å–ª—å:\n\n{content}",
            'general': content
        }
        
        final_prompt = prompts.get(command_type, content)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
        async with self.client.action(event.chat_id, 'typing'):
            try:
                response = self.hide_client.generate_text(
                    final_prompt,
                    temperature=0.7,
                    max_tokens=1000,
                    top_p=0.9
                )
                
                # –†–µ–∂–∏–º hide: –∑–∞–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–æ–º (–æ—Ç –ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
                await event.edit(response)
                print(f"‚úÖ –û—Ç–≤–µ—Ç (hide —Ä–µ–∂–∏–º) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {response[:100]}...")
                
            except Exception as e:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
                await event.edit(error_msg)
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def _handle_command(self, event, command_type: str, content: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã"""
        if not content:
            return
        
        print(f"\nüìù –ö–æ–º–∞–Ω–¥–∞ [{command_type}]: {content[:50]}...")
        
        # –î–ª—è –æ–±—â–∏—Ö –∫–æ–º–∞–Ω–¥ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥—Ç–∏–ø –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        actual_command_type = command_type
        actual_content = content
        
        if command_type == 'general':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ø–æ–¥–∫–æ–º–∞–Ω–¥—ã
            if content.startswith('rewrite '):
                actual_command_type = 'rewrite'
                actual_content = content[8:].strip()
            elif content.startswith('translate '):
                actual_command_type = 'translate'
                actual_content = content[10:].strip()
            elif content.startswith('explain '):
                actual_command_type = 'explain'
                actual_content = content[8:].strip()
            elif content.startswith('fix '):
                actual_command_type = 'fix'
                actual_content = content[4:].strip()
            elif content.startswith('short '):
                actual_command_type = 'short'
                actual_content = content[6:].strip()
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–∑–±–æ—Ä–∞
        if actual_command_type != command_type:
            print(f"üìã –†–∞–∑–æ–±—Ä–∞–Ω–æ –∫–∞–∫: [{actual_command_type}] '{actual_content[:30]}...'")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–º–∞–Ω–¥—ã
        prompts = {
            'rewrite': f"–ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –æ–Ω –∑–≤—É—á–∞–ª –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –≥—Ä–∞–º–æ—Ç–Ω–æ:\n\n{actual_content}",
            'translate': f"–ü–µ—Ä–µ–≤–µ–¥–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫:\n\n{actual_content}",
            'explain': f"–û–±—ä—è—Å–Ω–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏:\n\n{actual_content}",
            'fix': f"–ò—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫–∏ –≤ —ç—Ç–æ–º —Ç–µ–∫—Å—Ç–µ:\n\n{actual_content}",
            'short': f"–°–æ–∫—Ä–∞—Ç–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç, —Å–æ—Ö—Ä–∞–Ω–∏–≤ –æ—Å–Ω–æ–≤–Ω—É—é –º—ã—Å–ª—å:\n\n{actual_content}",
            'general': actual_content
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç (–±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥)
        final_prompt = prompts.get(actual_command_type, actual_content)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
        async with self.client.action(event.chat_id, 'typing'):
            try:
                response = self.normal_client.generate_text(
                    final_prompt,
                    temperature=0.7,
                    max_tokens=1000,
                    top_p=0.9
                )
                
                # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å + –æ—Ç–≤–µ—Ç
                original_text = event.message.message
                full_response = f"{original_text}\n\n–û—Ç–≤–µ—Ç GPT:\n{response}"
                await event.edit(full_response)
                print(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {response[:100]}...")
                
            except Exception as e:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
                await event.edit(error_msg)
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


class TelegramUserBotWithAutoReply(TelegramUserBotAdvanced):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è userbot —Å —Ñ—É–Ω–∫—Ü–∏–µ–π –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞"""
    
    def __init__(self):
        super().__init__()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞
        self.auto_reply_chats: Dict[int, Dict] = {}  # {chat_id: {"enabled": True, "name": "Chat Name", "last_activity": timestamp}}
        self.auto_reply_settings = {
            "delay_min": 5,    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            "delay_max": 15,   # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            "context_messages": 10,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            "enabled": True    # –ì–ª–æ–±–∞–ª—å–Ω–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ
        }
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞
        self.auto_reply_prompt = (
            "–†–ï–ñ–ò–ú: –¢–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨! –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞ ('—è', '–º–Ω–µ', '–º–æ–π')! "
            "–¢—ã –ù–ï –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –ù–ï –ø–æ–º–æ—â–Ω–∏–∫, –∞ —Å–∞–º —á–µ–ª–æ–≤–µ–∫ –∫–æ—Ç–æ—Ä—ã–π –ø–∏—à–µ—Ç –≤ —á–∞—Ç–µ. "
            "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã –∏ –æ—Ç–≤–µ—á–∞–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —á–µ–ª–æ–≤–µ–∫. "
            "–ò—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—É—é —Ä–µ—á—å, –±—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º. "
            "–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É, –∫–∞–∫ –≤ –æ–±—ã—á–Ω–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–µ. "
            "–ó–ê–ü–†–ï–©–ï–ù–û –≥–æ–≤–æ—Ä–∏—Ç—å –æ—Ç —Ç—Ä–µ—Ç—å–µ–≥–æ –ª–∏—Ü–∞ –∏–ª–∏ –∫–∞–∫ —Å–æ–≤–µ—Ç—á–∏–∫! "
            "\n–ü–†–ê–í–ò–õ–ê –ü–†–û–ü–£–°–ö–ê –û–¢–í–ï–¢–û–í:"
            "- –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å—Ç–∏–∫–µ—Ä –∏–ª–∏ —ç–º–æ–¥–∑–∏ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ - –æ—Ç–≤–µ—á–∞–π 'SKIP'"
            "- –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞ '–æ–∫', '—Ö–æ—Ä–æ—à–æ', '–ø–æ–Ω—è—Ç–Ω–æ' –±–µ–∑ –≤–æ–ø—Ä–æ—Å–∞ - –æ—Ç–≤–µ—á–∞–π 'SKIP'"
            "- –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Ä–µ–∞–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ) - –æ—Ç–≤–µ—á–∞–π 'SKIP'"
            "- –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –æ—Ç–≤–µ—á–∞–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É"
        )
        
        self.auto_reply_client = ProxyAPIClient(system_prompt=self.auto_reply_prompt)
        
        # –°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∏–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
        self.processed_messages: Set[int] = set()
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ userbot —Å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–º"""
        print("üöÄ –ó–∞–ø—É—Å–∫ Telegram UserBot —Å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–º...")
        
        await self.client.start(phone=self.phone)
        
        me = await self.client.get_me()
        print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.first_name} (@{me.username})")
        print("üì± UserBot –∞–∫—Ç–∏–≤–µ–Ω!")
        print("ü§ñ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –≤–∫–ª—é—á–µ–Ω –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤")
        print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–æ–º–∞–Ω–¥—ã @gpt)
        @self.client.on(events.NewMessage(outgoing=True))
        async def handle_outgoing_message(event):
            await self._process_message(event)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∞–≤—Ç–æ–æ—Ç–≤–µ—Ç)
        @self.client.on(events.NewMessage(incoming=True))
        async def handle_incoming_message(event):
            await self._process_auto_reply(event)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        await self.client.run_until_disconnected()
    
    async def _process_auto_reply(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞
            if not self.auto_reply_settings.get("enabled", True):
                return
            
            chat_id = event.chat_id
            message_id = event.message.id
            
            # –ò–∑–±–µ–≥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if message_id in self.processed_messages:
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
            if chat_id not in self.auto_reply_chats or not self.auto_reply_chats[chat_id].get("enabled", False):
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if not event.message.message or not event.message.message.strip():
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
            self.processed_messages.add(message_id)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if len(self.processed_messages) > 1000:
                # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 500
                self.processed_messages = set(list(self.processed_messages)[-500:])
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
            message_text = event.message.message or ""
            sender_info = "Unknown"
            
            try:
                sender = await event.get_sender()
                if sender:
                    sender_info = getattr(sender, 'first_name', 'Unknown') or getattr(sender, 'username', 'Unknown') or 'Unknown'
            except:
                pass
            
            print(f"\nü§ñ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç: –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {chat_id}")
            print(f"üë§ –û—Ç: {sender_info}")
            print(f"üìù –¢–µ–∫—Å—Ç: '{message_text[:100]}{'...' if len(message_text) > 100 else ''}'")
            print(f"üìä –¢–∏–ø: {type(event.message.media).__name__ if event.message.media else '—Ç–µ–∫—Å—Ç'}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context = await self._get_auto_reply_context(event)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
            prompt = f"{context}\n\n–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_text}\n\n–û—Ç–≤–µ—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ:"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É
            import random
            delay = random.randint(
                self.auto_reply_settings["delay_min"],
                self.auto_reply_settings["delay_max"]
            )
            
            print(f"‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º: {delay} —Å–µ–∫")
            await asyncio.sleep(delay)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
            async with self.client.action(chat_id, 'typing'):
                await asyncio.sleep(1)  # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–µ—á–∞—Ç–∞–Ω–∏–µ
                
                try:
                    response = self.auto_reply_client.generate_text(
                        prompt,
                        temperature=0.8,
                        max_tokens=300,
                        top_p=0.9
                    )
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ—Ç–≤–µ—Ç
                    if response.strip().upper() == 'SKIP':
                        print("‚è≠Ô∏è GPT —Ä–µ—à–∏–ª –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç")
                        print(f"üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: —Å—Ç–∏–∫–µ—Ä, —Ñ–æ—Ç–æ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞, –Ω–µ—É–º–µ—Å—Ç–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å")
                        print(f"üí≠ –°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ: '{message_text[:50]}{'...' if len(message_text) > 50 else ''}'")
                        return
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                    await self.client.send_message(chat_id, response)
                    print(f"‚úÖ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {response[:100]}...")
                    print(f"üìä –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(response)} —Å–∏–º–≤–æ–ª–æ–≤")
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞: {e}")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞: {e}")
    
    async def _get_auto_reply_context(self, event, limit: int = None) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞"""
        if limit is None:
            limit = self.auto_reply_settings.get("context_messages", 10)
            
        try:
            messages = []
            
            async for message in self.client.iter_messages(
                event.chat_id,
                limit=limit + 5,  # –ë–µ—Ä–µ–º –±–æ–ª—å—à–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                reverse=False
            ):
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if message.id == event.message.id:
                    continue
                
                # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                if message.message and message.message.strip():
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                    if message.out:
                        sender = "–í—ã"
                    else:
                        sender_user = await message.get_sender()
                        if sender_user:
                            sender = getattr(sender_user, 'first_name', '–°–æ–±–µ—Å–µ–¥–Ω–∏–∫') or '–°–æ–±–µ—Å–µ–¥–Ω–∏–∫'
                        else:
                            sender = '–°–æ–±–µ—Å–µ–¥–Ω–∏–∫'
                    
                    messages.append(f"{sender}: {message.message}")
                    
                    if len(messages) >= limit:
                        break
            
            if messages:
                # –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –¥–ª—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
                context_messages = "\n".join(reversed(messages))
                return f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã:\n{context_messages}"
            
            return "–ù–∞—á–∞–ª–æ –±–µ—Å–µ–¥—ã."
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞: {e}")
            return "–ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
    
    def add_auto_reply_chat(self, chat_id: int, chat_name: str = "Unknown") -> bool:
        """–î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç –¥–ª—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞"""
        try:
            self.auto_reply_chats[chat_id] = {
                "enabled": True,
                "name": chat_name,
                "last_activity": None
            }
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —á–∞—Ç –¥–ª—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞: {chat_name} ({chat_id})")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞: {e}")
            return False
    
    def remove_auto_reply_chat(self, chat_id: int) -> bool:
        """–£–¥–∞–ª–∏—Ç—å —á–∞—Ç –∏–∑ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞"""
        try:
            if chat_id in self.auto_reply_chats:
                chat_name = self.auto_reply_chats[chat_id].get("name", "Unknown")
                del self.auto_reply_chats[chat_id]
                print(f"‚úÖ –£–¥–∞–ª–µ–Ω —á–∞—Ç –∏–∑ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞: {chat_name} ({chat_id})")
                return True
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞: {e}")
            return False
    
    def toggle_auto_reply_chat(self, chat_id: int) -> bool:
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞ –¥–ª—è —á–∞—Ç–∞"""
        try:
            if chat_id in self.auto_reply_chats:
                current_status = self.auto_reply_chats[chat_id].get("enabled", False)
                self.auto_reply_chats[chat_id]["enabled"] = not current_status
                chat_name = self.auto_reply_chats[chat_id].get("name", "Unknown")
                status = "–≤–∫–ª—é—á–µ–Ω" if not current_status else "–≤—ã–∫–ª—é—á–µ–Ω"
                print(f"‚úÖ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –¥–ª—è {chat_name}: {status}")
                return True
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return False
    
    def get_auto_reply_chats(self) -> Dict[int, Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ —Å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–º"""
        return self.auto_reply_chats.copy()
    
    def update_auto_reply_settings(self, settings: Dict) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞"""
        try:
            if "delay_min" in settings:
                self.auto_reply_settings["delay_min"] = max(1, int(settings["delay_min"]))
            if "delay_max" in settings:
                self.auto_reply_settings["delay_max"] = max(self.auto_reply_settings["delay_min"], int(settings["delay_max"]))
            if "context_messages" in settings:
                self.auto_reply_settings["context_messages"] = max(1, min(50, int(settings["context_messages"])))
            if "enabled" in settings:
                self.auto_reply_settings["enabled"] = bool(settings["enabled"])
            
            print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            return False
    
    def get_auto_reply_settings(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞"""
        return self.auto_reply_settings.copy()
    
    async def get_dialogs_list(self, limit: int = 50) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            dialogs = []
            
            async for dialog in self.client.iter_dialogs(limit=limit):
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏–∞–ª–æ–≥–µ
                chat_id = dialog.id
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ç–∏–ø
                if dialog.is_user:
                    # –õ–∏—á–Ω—ã–π –¥–∏–∞–ª–æ–≥
                    name = dialog.name or f"User {chat_id}"
                    chat_type = "user"
                elif dialog.is_group:
                    # –ì—Ä—É–ø–ø–∞
                    name = dialog.name or f"Group {chat_id}"
                    chat_type = "group"
                elif dialog.is_channel:
                    # –ö–∞–Ω–∞–ª
                    name = dialog.name or f"Channel {chat_id}"
                    chat_type = "channel"
                else:
                    # –î—Ä—É–≥–æ–µ
                    name = dialog.name or f"Chat {chat_id}"
                    chat_type = "other"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ—Ç —á–∞—Ç –≤ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞—Ö
                is_auto_reply_enabled = chat_id in self.auto_reply_chats and self.auto_reply_chats[chat_id].get("enabled", False)
                
                dialogs.append({
                    "chat_id": chat_id,
                    "name": name,
                    "type": chat_type,
                    "unread_count": dialog.unread_count,
                    "auto_reply_enabled": is_auto_reply_enabled
                })
            
            print(f"üìã –ü–æ–ª—É—á–µ–Ω–æ {len(dialogs)} –¥–∏–∞–ª–æ–≥–æ–≤")
            return dialogs
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤: {e}")
            return []


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ userbot"""
    try:
        # –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –æ–±—ã—á–Ω—É—é –∏–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
        # bot = TelegramUserBot()  # –ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è
        bot = TelegramUserBotWithAutoReply()  # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
        
        await bot.start()
        
    except KeyboardInterrupt:
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        if 'bot' in locals():
            await bot.stop()
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    asyncio.run(main()) 