"""
–í–µ–± –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ FastAPI
"""

import os
import asyncio
import json
from typing import Optional, Dict, List
from datetime import datetime
from fastapi import FastAPI, Request, Form, HTTPException, BackgroundTasks
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.templating import Jinja2Templates
from fastapi.staticfiles import StaticFiles
import uvicorn
from dotenv import load_dotenv

from .telegram_client import TelegramUserBotAdvanced
from .proxy_api import ProxyAPIClient

load_dotenv()

app = FastAPI(title="Telegram Bot Manager", description="–í–µ–± –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram –±–æ—Ç–æ–º")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤
templates = Jinja2Templates(directory="templates")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
bot_instance: Optional[TelegramUserBotAdvanced] = None
bot_task: Optional[asyncio.Task] = None
is_bot_running = False
bot_logs: List[Dict] = []

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
bot_settings = {
    "temperature": 0.7,
    "max_tokens": 500,
    "system_prompt_normal": "",
    "system_prompt_hide": "",
}

def add_log(level: str, message: str):
    """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥"""
    global bot_logs
    log_entry = {
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "level": level,
        "message": message
    }
    bot_logs.append(log_entry)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤
    if len(bot_logs) > 100:
        bot_logs = bot_logs[-100:]

@app.get("/", response_class=HTMLResponse)
async def main_page(request: Request):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–µ–± –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ
        proxy_client = ProxyAPIClient()
        balance = proxy_client.get_balance()
        balance_info = f"{balance:.2f} ‚ÇΩ"
    except Exception as e:
        balance_info = f"–û—à–∏–±–∫–∞: {str(e)}"
    
    return templates.TemplateResponse("index.html", {
        "request": request,
        "is_bot_running": is_bot_running,
        "balance": balance_info,
        "bot_logs": bot_logs[-10:],  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
        "settings": bot_settings
    })

@app.post("/bot/start")
async def start_bot(background_tasks: BackgroundTasks):
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    global bot_instance, bot_task, is_bot_running
    
    if is_bot_running:
        return JSONResponse({"status": "error", "message": "–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω"})
    
    try:
        bot_instance = TelegramUserBotAdvanced()
        add_log("INFO", "–°–æ–∑–¥–∞–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
        async def run_bot():
            global is_bot_running
            try:
                is_bot_running = True
                add_log("INFO", "–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
                await bot_instance.start()
            except Exception as e:
                add_log("ERROR", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {str(e)}")
                is_bot_running = False
        
        bot_task = asyncio.create_task(run_bot())
        add_log("INFO", "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        
        return JSONResponse({"status": "success", "message": "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω"})
    
    except Exception as e:
        add_log("ERROR", f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {str(e)}")
        return JSONResponse({"status": "error", "message": str(e)})

@app.post("/bot/stop")
async def stop_bot():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
    global bot_instance, bot_task, is_bot_running
    
    if not is_bot_running:
        return JSONResponse({"status": "error", "message": "–ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω"})
    
    try:
        is_bot_running = False
        
        if bot_instance:
            await bot_instance.stop()
            add_log("INFO", "–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        if bot_task and not bot_task.done():
            bot_task.cancel()
            try:
                await bot_task
            except asyncio.CancelledError:
                pass
        
        bot_instance = None
        bot_task = None
        
        return JSONResponse({"status": "success", "message": "–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"})
    
    except Exception as e:
        add_log("ERROR", f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: {str(e)}")
        return JSONResponse({"status": "error", "message": str(e)})

@app.get("/bot/status")
async def bot_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
    return JSONResponse({
        "is_running": is_bot_running,
        "logs_count": len(bot_logs)
    })

@app.get("/api/balance")
async def get_balance():
    """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å ProxyAPI"""
    try:
        proxy_client = ProxyAPIClient()
        balance = proxy_client.get_balance()
        return JSONResponse({"status": "success", "balance": balance})
    except Exception as e:
        return JSONResponse({"status": "error", "message": str(e)})

@app.post("/api/test-gpt")
async def test_gpt(request: Request):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GPT –∑–∞–ø—Ä–æ—Å–∞"""
    try:
        data = await request.json()
        prompt = data.get("prompt", "")
        
        if not prompt:
            return JSONResponse({"status": "error", "message": "–ù–µ —É–∫–∞–∑–∞–Ω prompt"})
        
        proxy_client = ProxyAPIClient()
        response = proxy_client.generate_text(
            prompt,
            temperature=bot_settings.get("temperature", 0.7),
            max_tokens=bot_settings.get("max_tokens", 500)
        )
        
        add_log("INFO", f"–¢–µ—Å—Ç GPT: {prompt[:50]}...")
        return JSONResponse({"status": "success", "response": response})
        
    except Exception as e:
        add_log("ERROR", f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è GPT: {str(e)}")
        return JSONResponse({"status": "error", "message": str(e)})

@app.get("/api/logs")
async def get_logs():
    """–ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏"""
    return JSONResponse({"logs": bot_logs})

@app.post("/api/settings")
async def update_settings(request: Request):
    """–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"""
    global bot_settings
    
    try:
        data = await request.json()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if "temperature" in data:
            bot_settings["temperature"] = float(data["temperature"])
        if "max_tokens" in data:
            bot_settings["max_tokens"] = int(data["max_tokens"])
        if "system_prompt_normal" in data:
            bot_settings["system_prompt_normal"] = data["system_prompt_normal"]
        if "system_prompt_hide" in data:
            bot_settings["system_prompt_hide"] = data["system_prompt_hide"]
        
        add_log("INFO", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        return JSONResponse({"status": "success", "message": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"})
        
    except Exception as e:
        add_log("ERROR", f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}")
        return JSONResponse({"status": "error", "message": str(e)})

@app.get("/api/settings")
async def get_settings():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    return JSONResponse({"settings": bot_settings})

def run_web_interface(host: str = "127.0.0.1", port: int = 8000):
    """–ó–∞–ø—É—Å–∫ –≤–µ–± –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    print(f"üåê –ó–∞–ø—É—Å–∫ –≤–µ–± –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –Ω–∞ http://{host}:{port}")
    print("üì± –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∞–¥—Ä–µ—Å—É –≤—ã—à–µ")
    
    uvicorn.run(
        "pl.web_interface:app",
        host=host,
        port=port,
        reload=False,
        log_level="info"
    )

if __name__ == "__main__":
    run_web_interface() 