"""
CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è ProxyAPI —É—Ç–∏–ª–∏—Ç—ã
"""

import argparse
import sys
from pl.proxy_api import ProxyAPIClient


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    parser = argparse.ArgumentParser(
        description="–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å ProxyAPI GPT-4o mini",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python -m pl.cli chat                           # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
  python -m pl.cli balance                        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å
  python -m pl.cli ask "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?"        # –û–¥–∏–Ω–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å
  python -m pl.cli ask "–û–±—ä—è—Å–Ω–∏ –∫–≤–∞–Ω—Ç–æ–≤—É—é —Ñ–∏–∑–∏–∫—É" --max-tokens 500
        """
    )
    
    parser.add_argument(
        '--api-key',
        help='API –∫–ª—é—á ProxyAPI (–º–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –∑–∞–¥–∞—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è PROXY_API_KEY)'
    )
    
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')
    
    # –ö–æ–º–∞–Ω–¥–∞ chat
    chat_parser = subparsers.add_parser('chat', help='–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç —Å GPT-4o mini')
    
    # –ö–æ–º–∞–Ω–¥–∞ balance
    balance_parser = subparsers.add_parser('balance', help='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞')
    
    # –ö–æ–º–∞–Ω–¥–∞ ask
    ask_parser = subparsers.add_parser('ask', help='–ó–∞–¥–∞—Ç—å –æ–¥–∏–Ω–æ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å')
    ask_parser.add_argument('question', help='–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞')
    ask_parser.add_argument('--temperature', type=float, default=0.7, 
                           help='–°—Ç–µ–ø–µ–Ω—å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ (0.0-1.0, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.7)')
    ask_parser.add_argument('--max-tokens', type=int, default=300,
                           help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 300)')
    ask_parser.add_argument('--top-p', type=float, default=0.95,
                           help='–ö–æ–Ω—Ç—Ä–æ–ª—å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è –æ—Ç–≤–µ—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.95)')
    
    # –ö–æ–º–∞–Ω–¥–∞ telegram
    telegram_parser = subparsers.add_parser('telegram', help='–ó–∞–ø—É—Å–∫ Telegram UserBot')
    telegram_parser.add_argument('--advanced', action='store_true',
                                help='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        client = ProxyAPIClient(api_key=args.api_key)
        
        if args.command == 'chat':
            client.chat()
            
        elif args.command == 'balance':
            balance = client.get_balance()
            print(f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance:.2f} ‚ÇΩ")
            
        elif args.command == 'ask':
            print("ü§ñ GPT-4o mini –¥—É–º–∞–µ—Ç...")
            response = client.generate_text(
                args.question,
                temperature=args.temperature,
                max_tokens=args.max_tokens,
                top_p=args.top_p
            )
            print(f"\nü§ñ –û—Ç–≤–µ—Ç: {response}")
            
        elif args.command == 'telegram':
            import asyncio
            from pl.telegram_client import TelegramUserBot, TelegramUserBotAdvanced
            
            async def run_telegram():
                if args.advanced:
                    bot = TelegramUserBotAdvanced()
                else:
                    bot = TelegramUserBot()
                
                try:
                    await bot.start()
                except KeyboardInterrupt:
                    print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
                    await bot.stop()
            
            asyncio.run(run_telegram())
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main() 